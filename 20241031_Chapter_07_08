## 챕터 7: **보조기억장치**

1. **하드디스크란? 그리고 플래터, 스핀들, 회전헤드, 디스크암 중에 하나를 골라서 설명해주세요**

은혜: 하드디스크란 자기적인 방식으로 데이터를 저장하는 장치, 플래터는 하드디스크를 쪼갰을 때 동그란 부분 원을 말함

강현: 하드디스크는 자기적인 방식으로 데이터를 저장하는 보조기억장치를 말하며, 스핀은 정보를 저장하는 곳인 플래터를 원하는 위치로 돌려서 헤드에 맞춰야되기 때문에 그 플래터를 돌리는 부분을 말합니다. 

지웅: 하드디스크는 보조 기억 장치 중에 자기적인 방식을 사용하는 장치로 헤드는 트랙형태로 저장되는데 그때 원하는 트랙 위치에 맞춰서 이동할 수 있게 본인의 위치에 딱 맞추는 장치입니다.

---

정답)

하드디스크(HDD: Hard Disk Drive): 자기적인 방식으로 데이터를 저장하는 보조기억장치. 자기 디스크(magnetic disk)의 일종.

플래터(platter): 동그란 원판. 하드디스크에서 실질적으로 데이터가 저장되는 공간.

스핀들(spindle): 플래터를 회전시키는 구성 요소. 스핀들이 플래터를 돌리는 속도는 RPM 으로 표현.

- RPM(Revolution Per Minute): 분당 회전수. ex) RPM = 15,000 => 1분당 15,000 바퀴

회전헤드(Head): 플래터를 대상으로 데이터를 읽고 쓰는 구성 요소. 디스크 암에 부착.

디스크 암(disk arm): 헤드를 원하는 위치로 이동시키는 부품.

1. **플래시 메모리란? SLC, MLC, TLC 중에 하나씩 맡아서 설명해주세요**

지웅: 플래시 메모리는 셀 안에 일정 비트를 넣어가지고 저장하는 방식을 말합니다. SLC 방식은 그 셀 안에 단어 하나의 비트만 넣는 방식으로 표현할 수 있는 정보가 2개밖에 없고 상대적으로 비싸지만 더 오래 사용할 수 있고 빠르다는 장점이 있습니다.

강현: 플래시 메모리는 셀에 이제 비트를 입력해서 데이터를 저장하는 방식으로 이제 MNC라는 방법은 이제 sc와 TSLC와 비교했을 때 가격이 조금 더 싸고 한 셀에 2비트를 저장하게 되고 SLC보다는 느리지만 TLC보다는 빠르다는 장점이 있습니다.

은혜: 플레시 메모리는 비트를 저장하는 장치를 말합니다. tlc는 triple-level cell로 한 셀의 3비트씩 저장하는 셀을 말합니다. slc과 mlc보다 더 많은 정보를 저장할 수 있지만 수명이 짧습니다.

---

정답)

플래시 메모리(flash memory)

: 전기적으로 데이터를 읽고 쓸 수 있는 반도체 기반의 저장 장치.

ex) USB, SD카드, SSD 등

- < 셀 당 저장하는 비트 수에 따른 플래시 구분 >
- SLC(single-level cell): 한 셀당 **한 비트**씩 저장하는 셀.→ 0 또는 1 저장 가능.
- MLC(multiple-level cell): 한 셀에 **2비트**씩 저장할 수 있는 셀.→ 00, 01, 10, 11 총 4 가지 저장 가능.
- TLC(triple-level cell): 한 셀에 **3비트**씩 저장할 수 있는 셀.→ 000, 001, 010, 011, 100, 101, 110, 111 총 8 가지 저장 가능.

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/e65471c1-b762-4e3e-8b77-d368e1e47ecc/56b48d3f-eb3e-48c2-8990-1fe6aad91f0c/image.png)

1. **레이드(RAID)에 대해서 설명하시고 각각 RAID 0, 1, ,4, 5, 6 중에 하나씩 설명해주세요**

다환: **RAID**는 데이터를 분산해서 저장하는 방식으로 **RAID** 0 은 단순하게 데이터를 분산해서 저장하는 장치로, 줄무늬처럼 보이는데 이렇게 분산해서 저장하는 방식을 스트라이핑이라고합니다.

지웅: **RAID**는 여러 개의 보조 장치를 마치 한 개의 보조 장치처럼 사용하는 분산 저장 방법입니다. 레이더 0에서 하나의 저장장치만 이상이 생기면, 이제 다른 것도 모든 데이터가 유실된다는 문제가 있기 때문에 등장한 것이 레이드 1입니다. **RAID** 1은 하나의 저장 장치에 저장을 했으면 그 데이터를 그대로 또 하나의 저장 장치에 또 복사본을 만들어 두는 방식으로 데이터 손실을 예방할 수 있습니다. 단 이 방법을 사용할 경우에 데이터를 저장할 수 있는 공간이 절반으로 줄어든다는 단점이 있습니다.

강현: **RAID** 는 데이터의 안전성과 성능 향상을 위해 여러 개의 물리 보조 기억 장치를 하나의 논리적 보조 기억 장치처럼 사용하는 기술입니다. **RAID** 4는 오류를 검출하고 해결하는 페리티 비트를 이제 보조 기억장치 한 군데 저장을 하고 나머지 보조 기억 장치들에는 데이터를 저장하고 오류가 생겼을 때 페리트 비트를 활용해서 오류를 수정하는 방식의 저장 방식입니다.

답변)

- RAID(Redundant Array or Independent Disks): 다수의 작은 디스크들을 배열로 연결하여 용량, 신뢰성을 높인 대용량 디스크 시스템.
- RAID-0: 여러 개의 디스크에 데이터를 분산하여 저장하는 방식.

!https://blog.kakaocdn.net/dn/leCj7/btsoyXMjPo0/JhSnimpkbkFjkii16d7rg1/img.png

RAID-0 데이터 저장 예시

→ 구성된 하드 디스크 중 1개라도 문제가 생기면 다른 하드 디스크의 정보를 읽는데 문제가 발생하는 구조.

- RAID-1: 데이터를 두 개의 디스크들에 중복 저장하여 RAID-0 의 단점을 보완한 방식. 거울처럼 완벽한 복사본을 만드는 구성으로 **디스크 미러링(disk mirroring)방식**

!https://blog.kakaocdn.net/dn/cnEnoL/btsoGhJR9yj/9KbMfFW69YT7h7inKBK11K/img.png

RAID-1 데이터 저장 예시

→ 미러 디스크가 존재하기 때문에 복구가 매우 쉬움. 하지만 많은 양의 하드 디스크가 필요하다는 단점 존재.

- RAID-4: 오류를 검출하고 복구하기 위한 정보를 저장하는 디스크를 추가한 방식.

!https://blog.kakaocdn.net/dn/bWny2A/btsoyH4brCg/pB8NM0ymGdb7nWlxsbFlN0/img.png

RAID-4 데이터 저장 예시

→ 적은 하드 디스크로 데이터를 안전하게 보관할 수 있는 방식. 패리티 디스크를 통해서 **오류 검출과 복구가 가능**하다.

하지만 새로운 데이터를 저장할 때마다 패리티 디스크에 접근함으로 **병목현상** 발생.

병목현상: 전체 시스템의 성능이나 용량이 하나의 구성 요소로 인해 제한을 받는 현상

- RAID-5: 패리티 정보를 분산하여 저장하는 방식으로 병목현상을 해소한 방식.

!https://blog.kakaocdn.net/dn/QzK8u/btsowX1hZpE/Z5ikDOgC8bna5kkUDjHhjK/img.png

RAID-5 데이터 저장 예시

→ 패리티 비트를 여러 디스크에 *분산배치* 하여 병목현상을 해소함.

- RAID-6: 서로 다른 두 개의 패리티를 배치하여 데이터의 신뢰성을 높인 방식.

!https://blog.kakaocdn.net/dn/ePdA1L/btsoyJt6xOF/HmajTJIwAkie7NyTIfTiPK/img.png

RAID-6 데이터 저장 예시

→ 패리티가 각 데이터마다 2개씩 존재하여 데이터의 신뢰성이 높음. 하지만 데이터를 저장할 때 각 패리티에 접근해야 함으로 쓰기 속도가 저하됨.

## **Chapter 8. 입출력장치**

**08-1 장치 컨트롤러와 장치 드라이버**

1. **장치컨트롤러란 무엇인지와, 장치 컨트롤러의 내부에는 데이터 레지스터, 상태 레지스터, 제어 레지스터가 있습니다. 겹치지 않도록 한분씩 답변해주세요** 

은혜: 장치 컨트롤러는 여러 개의 입출력 장치가 있고 이 출력 장치를 컴퓨터 CPU와의 전송률을 맞추기 위해서 장치 컨트롤러가 필요합니다. 그래서 입출력 장치는 무조건 장치 컨트롤을 통해서 컴퓨터로 입력됩니다. 상태 레지스터는 CP 투자 장치 출력 장치에게 CPU가 비었는지 안 비었는지 상태를 설명해 주는 것입니다.

다환: 장치 컨트롤러는 CPU랑 입추적 장치 사이에서 데이터를 이동 시에 중계를 해주는 컨트롤러입니다 .이제 이 출력 장치랑 메모리 사이에서는 데이터를 저장하는 속도가 다르기 때문에 이제 버퍼라는 임시 데이터를 둬서 이 전송률의 차이를 보완을 해서 이러한 방식을 버퍼링이라고 부릅니다. 데이터 레지스터는  버퍼 역할을 해서 이렇게 임시적으로 데이터를 저장하는 곳을 말합니다. 최근에는 레스터 대신에 CPU로 대체를 해서 사용하고 있는 추세입니다.

지웅: 입출력 장치랑 CPU는 작업 시간에 차이가 있기 때문에 이 작업 시간을 맞추기도 하고 이제 CPU가 매번 입출력 장치한테 지금 작업 준비가 됐는지를 물어보는 과정을 홀링이라고 하는데 이는 비효율적입니다. 이러한 일들을 하는 것이 이제 장치 컨트롤러인데 양측 컨트롤러에 있는 마지막 레지스터인 제어 레지스터는 CPU가 명령어를 담아둡니다. 예를 들어서 메모리 입출력 장치에 작성을 한다든가 표시를 한다든가 이런 것을 적어놓게 됩니다.

---

정답)

장치 컨트롤러(device controller)

: 컴퓨터 내부와 정보를 주고받는 하드웨어 부품. 입출력 제어기(I/O controller), 입출력모듈((I/O module) 이라고도 함. 입출력 장치를 연결하기위한 하드웨어적인 통로

- 다양한 입출력장치들로 인해서 CPU와 정보를 주고받는 형식 규격화 어려움.
- CPU의 전송률에 비해 입출력장치들의 전송률은 매우 낮음.

→ 이러한 이유들로 인해서 CPU와 입출력장치는 장치 컨트롤러를 통해서 명령어를 수행함.

- 데이터 레지스터(data register): CPU와 입출력장치 사이에 주고받을 데이터가 담기는 레지스터. 버퍼 역할을 하는 레지스터.
- 상태 레지스터(status register): 입출력장치의 주요 상태 정보들이 저장되는 레지스터.
- 제어 레지스터(control register): 입출력장치가 수행할 내용에 대한 정보와 명령이 저장되는 레지스터.

1. **장치 드라이버란?**

강현: 장치 드라이버란 장치 컨트롤러와 컴퓨터 내부가 정보를 주고받을 수 있게 하는 부품입니다. 장치 컨트롤러가 하드웨어적 이라면 장치 드라이버는 소프트웨어적인 구분에서 도움을 준다고 할 수 있습니다.

---

정답)

장치 드라이버(device driver)

: 장치 컨트롤러의 동작을 감지하고 제어함으로써 장치 컨트롤러가 컴퓨터 내부와 정보를 주고받을 수 있게 하는 프로그램. 입출력장치를 연결하기위한 소프트웨어적인 통로

**08-2 다양한 입출력 방법**

1. **프로그램 입출력에는 두가지 방법이 있습니다. 메모리 맵 입출력과 고립형 입출력에 대해서 각각 설명해주세요** 
    
    다환: 프로그램 입출력이라는 거는 정치 컨트롤러가 있고 그 사이에 CPU와 추적 장치가 있습니다. 이 CPU와 입출력 장치가 직접적으로 장치 컨트롤러랑 통신을 하면서 데이터를 전송하게 됩니다. 이때 이제 고립형은 이 CPU가 리스트에 남기는 공간이랑 추적 장치가 리스트에 남기는 공간이 다른 것을 의미합니다. 이제 이 출력 방식이 전송하는 신호가 다른 것이 특징입니다. 그리고 이제 메모리 맵 방식은 이 통로가 같아서 이제 입출력 방식이 입출력 신호가 같게 사용할 수 있다는 특징이 있습니다.
    

---

정답)

- 프로그램 입출력
    - 메모리 맵 입출력(memory-mapped I/O): 메모리에 접근하기 위한 주소 공간과 입출력장치에 접근하기 위한 주소 공간을 하나의 같은 주소 공간을 사용하는 방법. 일부는 메모리를 위한 주소 공간으로 할당하고 다른 일부는 입출력장치를 위한 주소 공간을 할당하여 하나의 주소 공간으로 메모리와 입출력장치를 접근하는 것이 가능하다.→ 하나의 메모리 공간에 있기 때문에 메모리에 접근하는 명령어와 입출력장치에 접근하는 명령어가 같다.
    - 고립형 입출력(isolated I/O): 메모리를 위한 주소 공간과 입출력장치를 위한 주소 공간을 분리하는 방법. 고립형 입출력은 입출력장치 읽기/쓰기와 메모리 읽기/쓰기가 나누어져 각자 별도의 제어 버스를 사용한다.→ 메모리 맵 입출력 방식에 비해 메모리 주소 공간이 확보됨. 서로 다른 주소 공간을 활용하기 때문에 입출력장치 전용 명령어를 사용해야 한다.

!https://blog.kakaocdn.net/dn/N1Mm5/btsox9NA5cz/8BGJ3WWRcKOhLBOcdealZK/img.png

| 메모리 맵 입출력 | 고립형 입출력 |
| --- | --- |
| 메모리와 입출력 장치는 같은 주소공간 사용  | 메모리와 입출력장치는 분리된 주소공간 사용 |
| 메모리 주소 공간이 축소됨 | 메모리 주소 공간이 축소되지 않음 |
| 메모리와 입출력장치에 같은 명령어 사용 가능  | 입출력 전용 명령어 사용 |

1. **PIC 다중 인터럽트 처리과정에 대해서 설명해보세요 (답변자 2,3)**

지웅: 인터노트 방식은 앞서 설명했던 콜링 방식의 단점을 극복하기 위해서 나온 방식입니다. 기존의 CPU가 매번 입출력 장치한테 물어보던 폴링 방식과는 달리 CPU는 그저 입출력 이제 컨트롤러에다가 이런 이런 일을 해라고 시켜놓고 이제 이 출력 장치가 수행할 수 있을 때가 되면 인터럽트 신호를 보냄으로써 수행을 하게 되는데 이 인터럽트는 인터럽트 종류에 따라 우선순위가 전부 다르게 됩니다. 그래서 만약에 a를 실행하고 있었다 하더라도 그다음 들어온 b가 우선순위가 더 높을 경우에는 b의 실행을 먼저 하고 만약 a가 높을 경우에는 a가 끝나고 b를 실행하는 형태로 진행이 됩니다. 그런데 여기에서 포함이 안 되는 이 우선순위를 골라서 어떻게 진행해야 될지를 정해주는 장치가 **PIC** 입니다. 이때 이제 이 우선순위가 없는 무조건 먼저 실행해야 되는 인터럭트의 경우에는 **PIC** 랑 상관없이 그냥 우선순위랑 상관없이 무조건 먼저 실행이 되게 됩니다.

강현:  PIC의 장치 컨트롤러들에서 인트로트 요청 신호들을 받아들이게 되고 그중에서 PIC가 인트럭트의 우선순위를 확인을 한 다음에 우선순위가 높은 것들을 확인해서 CPU로 인트럭트 요청 신호를 보내게 됩니다.그럼 CPU는 PRC에 인터랙트 요청 신호를 받았다는 신호를 보내게 되고 이제 PIC는 그러면 CPU에 데이터 버스 통해 이제 인터럭트 벡터를 보내게 되고 맞아 CPU는 인트럭트 벡터를 받은 뒤 어떤 인터럭트인지 알게 되고 이제 그런 인터럭트 서비스 루틴을 통해서 인터럭트를 해결하는 방식으로 진행이 됩니다.

---

정답)

< PIC의 다중 인터럽트 처리 과정 >

1. PIC가 장치 컨트롤러에서 인터럽트 요청 신호 받아들임.

2. PIC는 인터럽트 우선순위 판단 후 CPU에 인터럽트 요청 신호 보냄.

3. CPU는 PIC에 인터럽트 확인 신호 보냄.

4. PIC는 데이터 버스를 통해 CPU에 인터럽트 벡터 보냄.

5. CPU는 인터럽트 벡터를 통해 요청 주체를 알고, 해당 장치의 인터럽트 서비스 루틴 실행.
